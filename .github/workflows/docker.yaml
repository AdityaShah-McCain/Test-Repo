name: Docker
on: [workflow_dispatch]

# we can configure a job to run in a docker container or we can also configure a step to run in a docker 
# container
# if we want to run our job in a container, we have to run the job in a linux machine (ubuntu)
# the jobs container and the steps container will run as sibling containers in the runner machine

jobs:
  docker-job:
    runs-on: ubuntu-latest
    # container: node:23-alpine3.20 # if you are using dockerhub, image_name:tag
    # if your image lives in another registry, then you just need to add something before for ex
    # docker://node:18.16-alpine3.17
    container: # we are specifying the docker image for the entire job
      image: node:23-alpine3.20
    #   credentials: # we have to do this if we using a private image, in our case the image is public
    #     username:
    #     password:
      env: # environment variables
        API_URL: some-url.com
      ports: # array of ports that we expose to the docker container
        - 80
    #   volumes: # three types of volumes (we don't have these paths in reality so we are commenting it)
    #     - vol_name:/path/in/container # this is a named volume
    #     - /path/in/container # unnamed (anonymous) volume
    #     - /path/in/host:/path/in/container # path in host machine mapped to path in container
    #   options: --cpus 1 # options are any options that you can post to the Docker Create command except network and entry point
    steps: # these steps won't directly run on the runner machine, it will run inside the container
      - name: Log Node & OS Versions
        run: |
          node -v
          cat /etc/os-release
      - name: Log Env
        run: echo $API_URL # to check if we have access to the environment variable we passed up above
      - name: Create a file
        run: echo 'Some text' > text.txt
      # when you define a docker image, in your DOCKERFILE, you can have a ENTRYPOINT
      # the entrypoint can have to forms, the shell form and the executable form
      - name: Container in a step
        uses: docker://node:18.16-alpine3.17 # uses key: instead of specifying an action, we specify a docker image
        # but the image by itself won't do anything
        with: # the entrypoint below will override the entrypoint of the docker image we are using
              # but in here we don't haev the shell form and executable file like in dockerfile.
              # in here we just add a path to an executable
              # args are going to be used instead of the cmd instruction in the dockerfile
          entrypoint: /usr/local/bin/node # path to the node in the container (ubuntu container(?))
          # have to add entrypoint if our image don't have one by default (in our case it does)
          args: -p 2+3
      - name: Log the node version
        uses: docker://node:18.16-alpine3.17
        with:
          args: -v
      - name: Show file contents
        uses: docker://node:18.16-alpine3.17
        with:
          entrypoint: cat
          args: text.txt
      - uses: actions/checkout@v4
      - name: Run a bash script
        uses: docker://node:18.16-alpine3.17
        with:
          entrypoint: ./script.sh
          args: "Some script"